import path from 'path';
import { Worker } from 'worker_threads';

import puppeteer from 'puppeteer';

/**
 * Ch·∫°y worker thread ƒë·ªÉ x·ª≠ l√Ω crawl n·ªôi dung
 * @param data - D·ªØ li·ªáu c·∫ßn truy·ªÅn v√†o worker (URL c·∫ßn crawl)
 * @returns Promise<{ url: string, content: string } | { error: string }>
 */
function runWorker(data: { url: string }): Promise<{ url: string; content: string } | { error: string }> {
  return new Promise((resolve, reject) => {
    const worker = new Worker(path.resolve(__dirname, './worker.js'), { workerData: data });

    worker.on('message', resolve); // Nh·∫≠n k·∫øt qu·∫£ t·ª´ worker
    worker.on('error', reject); // Worker g·∫∑p l·ªói, promise b·ªã reject
    worker.on('exit', (code) => {
      if (code !== 0) reject(new Error(`Worker stopped with exit code ${code}`));
    });
  });
}

/**
 * X·ª≠ l√Ω danh s√°ch URL b·∫±ng worker threads
 * @param urls - M·∫£ng c√°c URL c·∫ßn x·ª≠ l√Ω
 * @returns Promise<Array<{ url: string, content: string } | { error: string }>>
 */
export async function processURLs(
  urls: string[]
): Promise<Array<{ url: string; content: string } | { error: string }>> {
  const promises = urls.map((url) => runWorker({ url }));
  return await Promise.all(promises);
}

/**
 * Tr·ª±c ti·∫øp crawl n·ªôi dung t·ª´ m·ªôt trang web b·∫±ng Puppeteer
 * @param url - URL c·ªßa trang web c·∫ßn crawl
 * @returns Promise<{ title: string; content: string }>
 */
export async function crawlContent(url: string): Promise<{ title: string; content: string }> {
  const browser = await puppeteer.launch({ headless: false });
  const page = await browser.newPage();

  try {
    console.log(`üöÄ ƒêang truy c·∫≠p URL: ${url}`);

    // ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn URL, ch·ªù DOM load xong
    await page.goto(url, { waitUntil: 'domcontentloaded', timeout: 120000 });

    // L·∫•y ti√™u ƒë·ªÅ v√† n·ªôi dung ch√≠nh t·ª´ trang
    const data = await page.evaluate(() => {
      const title = document.querySelector('title')?.innerText || 'Kh√¥ng t√¨m th·∫•y ti√™u ƒë·ªÅ';

      // Th·ª≠ l·∫•y n·ªôi dung t·ª´ c√°c th·∫ª ph·ªï bi·∫øn
      const contentSelectors = ['article', 'div.content', 'div.main-content', 'section', 'body'];
      let content = '';

      for (const selector of contentSelectors) {
        const element = document.querySelector(selector);
        if (element) {
          content = element.textContent?.trim() || '';
          break;
        }
      }

      return { title, content };
    });

    await browser.close();
    return data;
  } catch (error) {
    await browser.close();
    throw new Error(`‚ùå L·ªói khi crawl d·ªØ li·ªáu: ${error.message}`);
  }
}
